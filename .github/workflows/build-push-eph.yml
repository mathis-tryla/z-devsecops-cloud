name: Build and Push to eph

on:
  pull_request:
    types: [ opened, synchronize ]

env:
  FRONTEND: ./frontend
  BACKEND: ./backend
  GITHUB_REPOSITORY: https://github.com/mathis-tryla/z-devsecops-cloud
  ARTIFACT_REGISTRY: europe-west1-docker.pkg.dev/z-devsecops-cloud/z-devsecops-registry
  GKE_CLUSTER: z-devsecops-cluster
  GKE_ZONE: europe-west1-b
  SA: github-action-sa@z-devsecops-cloud.iam.gserviceaccount.com
  WORKLOAD_ID_PROVIDER: projects/599822394994/locations/global/workloadIdentityPools/cicd/providers/github
  KMS: gcpkms://projects/z-devsecops-cloud/locations/europe-west1/keyRings/cosign/cryptoKeys/cosign
  PR_NUMBER: ${{ github.event.number }}

jobs:
  build-and-push-eph:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      security-events: write
      issues: write
      statuses: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v3

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      ## SAST
      #- name: Create .mvn directory for Snyk
      #  run: |-
      #    cd ${{ github.workspace }}/backend
      #    mvn -N io.takari:maven:wrapper

      #- name: Run Snyk to check for Frontend vulnerabilities
      #  uses: snyk/actions/node@master
      # TODO: comment the line below in production
      #  continue-on-error: true
      #  env:
      #    SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #  with:
      #    args: --sarif-file-output=snyk-frontend.sarif --file=frontend/package-lock.json -d

      #- name: Upload Snyk scan Frontend results to GitHub Security tab
      #  uses: github/codeql-action/upload-sarif@v2
      #  with:
      #    sarif_file: snyk-frontend.sarif
      #    category: 'snyk-frontend'

      #- name: Run Snyk to check for Backend vulnerabilities
      #  uses: snyk/actions/maven@master
        # TODO: comment the line below in production
      #  continue-on-error: true
      #  env:
      #    SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #  with:
      #    args: --sarif-file-output=snyk-backend.sarif --file=backend/pom.xml -d

      #- name: Upload Snyk scan Backend results to GitHub Security tab
      #  uses: github/codeql-action/upload-sarif@v2
      #  with:
      #    sarif_file: snyk-backend.sarif
      #    category: 'snyk-backend'

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: '19'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B --update-snapshots package --file ${{ env.BACKEND }}/pom.xml

      - name: Upgrade maven version
        run: |-
          cd ${{ env.BACKEND }} && mvn -q build-helper:parse-version versions:set \
          -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} \
          versions:commit

      #- name: Lint Code Base
      #  uses: github/super-linter@v5
      #  env:
      #    VALIDATE_ALL_CODEBASE: true
      #    DEFAULT_BRANCH: main
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        id: auth
        with:
          create_credentials_file: 'true'
          workload_identity_provider: ${{ env.WORKLOAD_ID_PROVIDER }}
          service_account: ${{ env.SA }}

      - name: Configure Docker to use the gcloud command-line tool as a credential
        run: |
          gcloud config set disable_prompts true
          gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}"
          gcloud --quiet auth configure-docker europe-west1-docker.pkg.dev

      - name: Get the GKE credentials
        uses: google-github-actions/get-gke-credentials@v1.0.1
        with:
          project_id: z-devsecops-cloud
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Build frontend docker image
        run: |-
          docker build \
            -t "${{ env.ARTIFACT_REGISTRY }}/frontend:pr-${{ env.PR_NUMBER }}" \
          ${{ env.FRONTEND }}

      - name: Build backend docker image
        run: |-
          docker build \
            -t "${{ env.ARTIFACT_REGISTRY }}/backend:pr-${{ env.PR_NUMBER }}" \
          ${{ env.BACKEND }}

      #- name: Run Trivy vulnerability scanner for frontend
      #  env:
      #    TRIVY_USERNAME: ""
      #  uses: aquasecurity/trivy-action@master
      #  with:
      #    image-ref: ${{ env.ARTIFACT_REGISTRY }}/frontend:latest
      #    scan-ref: ${{ github.workspace }}/frontend
      #    format: 'sarif'
      #    output: 'trivy-results-frontend.sarif'

      #- name: Run Trivy vulnerability scanner for backend
      #  env:
      #    TRIVY_USERNAME: ""
      #  uses: aquasecurity/trivy-action@master
      #  with:
      #    image-ref: ${{ env.ARTIFACT_REGISTRY }}/backend:latest
      #    scan-ref: ${{ github.workspace }}/backend
      #    format: 'sarif'
      #    output: 'trivy-results-backend.sarif'

      #- name: Upload Trivy scan results to GitHub Security tab frontend
      #  uses: github/codeql-action/upload-sarif@v2
      #  with:
      #    sarif_file: 'trivy-results-frontend.sarif'
      #    category: 'frontend'

      #- name: Upload Trivy scan results to GitHub Security tab backend
      #  uses: github/codeql-action/upload-sarif@v2
      #  with:
      #    sarif_file: 'trivy-results-backend.sarif'
      #    category: 'backend'

      - name: Publish docker images to Google Artifact Registry
        run: |-
          docker push ${{ env.ARTIFACT_REGISTRY }}/frontend --all-tags
          docker push ${{ env.ARTIFACT_REGISTRY }}/backend --all-tags

      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      - name: Sign images with Google KMS key
        run: |-
          cosign sign --yes --key ${{ env.KMS }} ${{ env.ARTIFACT_REGISTRY }}/frontend:pr-${{ env.PR_NUMBER }}
          cosign sign --yes --key ${{ env.KMS }} ${{ env.ARTIFACT_REGISTRY }}/backend:pr-${{ env.PR_NUMBER }}

      #- name: Add cosign tag to images
      #  run: |-
      #    FRONT_SHA=$(cosign triangulate ${{ env.ARTIFACT_REGISTRY }}/frontend:latest)
      #    BACK_SHA=$(cosign triangulate ${{ env.ARTIFACT_REGISTRY }}/backend:latest)
      #    FRONT_SHA=$(cut -d':' -f2 <<< $FRONT_SHA)
      #    BACK_SHA=$(cut -d':' -f2 <<< $BACK_SHA)
      #    docker tag ${{ env.ARTIFACT_REGISTRY }}/frontend:latest ${{ env.ARTIFACT_REGISTRY }}/frontend:$FRONT_SHA
      #    docker tag ${{ env.ARTIFACT_REGISTRY }}/backend:latest ${{ env.ARTIFACT_REGISTRY }}/backend:$BACK_SHA

      #- name: Publish docker images to Google Artifact Registry
      #  run: |-
      #    FRONT_SHA=$(docker push ${{ env.ARTIFACT_REGISTRY }}/frontend --all-tags | grep digest:)
      #    BACK_SHA=$(docker push ${{ env.ARTIFACT_REGISTRY }}/backend --all-tags)

      - name: Verify signed images
        run: |-
          cosign verify --key ${{ env.KMS }} ${{ env.ARTIFACT_REGISTRY }}/frontend:pr-${{ env.PR_NUMBER }}
          cosign verify --key ${{ env.KMS }} ${{ env.ARTIFACT_REGISTRY }}/backend:pr-${{ env.PR_NUMBER }}

      - name: Deploy docker images to the GKE cluster in eph
        env:
          MANIFESTS: deployment
          DEPLOYMENTS: deployment/dp
          NAMESPACES: deployment/namespaces
          SERVICES: deployment/services
          EPH_NS : pr-${{ env.PR_NUMBER }}
        run: |-
          sed -e "s/number/${{ env.PR_NUMBER }}/g" ${{ github.workspace }}/$NAMESPACES/eph.yml | kubectl apply -f -
          sed -e "s/:latest/:pr-${{ env.PR_NUMBER }}/g" ${{ github.workspace }}/$DEPLOYMENTS/frontend.yml && \
          sed -e "s/value: https/value: http/g" ${{ github.workspace }}/$DEPLOYMENTS/frontend.yml | kubectl apply -n $EPH_NS -f -
          sed -e "s/:latest/:pr-${{ env.PR_NUMBER }}/g" ${{ github.workspace }}/$DEPLOYMENTS/backend.yml | kubectl apply -n $EPH_NS -f -
          kubectl apply -f ${{ github.workspace }}/$SERVICES/api.yml -n $EPH_NS
          kubectl apply -f ${{ github.workspace }}/$SERVICES/frontend.yml -n $EPH_NS
          sed -e "s/host: front./host: pr-${{ env.PR_NUMBER }}./g" ${{ github.workspace }}/$MANIFESTS/ingress.yml | kubectl apply -n $EPH_NS -f -

      ## DAST
      - run: touch ${{ github.workspace }}/dast_eph_report.md && chmod a+rwx ${{ github.workspace }}/dast_eph_report.md
  
      - uses: actions/upload-artifact@v3
        with:
          name: dast_eph_report
          path: ${{ github.workspace }}/dast_eph_report.md
  
      - name: OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://pr-${{ env.PR_NUMBER }}.34.111.30.200.nip.io'
          cmd_options: "-d -w dast_eph_report.md"
          allow_issue_writing: false

      - name: Create PR comment with DAST report
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ env.PR_NUMBER }}
          body-path: ${{ github.workspace }}/dast_eph_report.md