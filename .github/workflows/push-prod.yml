name: Push to prod

on:
  push:
    branches: [ "main" ]

env:
  FRONTEND: ./frontend
  BACKEND: ./backend
  GKE_CLUSTER: z-devsecops-cluster
  GKE_ZONE: europe-west1-b
  SA: github-action-sa@z-devsecops-cloud.iam.gserviceaccount.com
  WORKLOAD_ID_PROVIDER: projects/599822394994/locations/global/workloadIdentityPools/cicd/providers/github
  ARTIFACT_REGISTRY: europe-west1-docker.pkg.dev/z-devsecops-cloud/z-devsecops-registry
  KMS: gcpkms://projects/z-devsecops-cloud/locations/europe-west1/keyRings/cosign/cryptoKeys/cosign

jobs:
  push-images-prod:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      security-events: write
      issues: write
      statuses: write

    steps:
      - uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        id: auth
        with:
          create_credentials_file: 'true'
          workload_identity_provider: ${{ env.WORKLOAD_ID_PROVIDER }}
          service_account: ${{ env.SA }}
        
      - name: Configure Docker to use the gcloud command-line tool as a credential
        run: |
          gcloud config set disable_prompts true
          gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}"
          gcloud --quiet auth configure-docker europe-west1-docker.pkg.dev
        
      - name: Get the GKE credentials
        uses: google-github-actions/get-gke-credentials@v1.0.1
        with:
          project_id: z-devsecops-cloud
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
     
      #- run: touch ${{ github.workspace }}/report_md
  
      #- uses: actions/upload-artifact@v3
      #   with:
      #     name: report_md
      #     path: ${{ github.workspace }}/report_md
  
      ## DAST
      #- name: OWASP ZAP Full Scan
      #  uses: zaproxy/action-full-scan@v0.4.0
      #  with:
      #    target: 'https://front.34.111.30.200.nip.io'
      #    cmd_options: "-d -w report_md" #show debug messages
      #    docker_name: 'owasp/zap2docker-stable'
      #    allow_issue_writing: false

      #- name: Set up JDK 19
      #  uses: actions/setup-java@v3
      #  with:
      #    java-version: '19'
      #    distribution: 'temurin'
      #    cache: maven
          
      - name: Build prod frontend docker image
        run: |-
          MVN_VERSION=$(cd backend && mvn -q \
            -Dexec.executable=echo \
            -Dexec.args='${project.version}' \
            --non-recursive \
            exec:exec)
          chmod +x get_last_pr_nb.sh
          eval "$(./get_last_pr_nb.sh)"
          docker pull \
            ${{ env.ARTIFACT_REGISTRY }}/frontend:$LAST_PR_NB
          docker tag \
            ${{ env.ARTIFACT_REGISTRY }}/frontend:$LAST_PR_NB \
            ${{ env.ARTIFACT_REGISTRY }}/frontend:$MVN_VERSION 

      - name: Build prod backend docker image
        run: |-
          MVN_VERSION=$(cd backend && mvn -q \
            -Dexec.executable=echo \
            -Dexec.args='${project.version}' \
            --non-recursive \
            exec:exec)
          chmod +x get_last_pr_nb.sh
          eval "$(./get_last_pr_nb.sh)"
          docker pull \
            ${{ env.ARTIFACT_REGISTRY }}/backend:$LAST_PR_NB
          docker tag \
            ${{ env.ARTIFACT_REGISTRY }}/backend:$LAST_PR_NB \
            ${{ env.ARTIFACT_REGISTRY }}/backend:$MVN_VERSION 

      - name: Publish docker images to Google Artifact Registry
        run: |-
          MVN_VERSION=$(cd backend && mvn -q \
            -Dexec.executable=echo \
            -Dexec.args='${project.version}' \
            --non-recursive \
            exec:exec)
          docker push ${{ env.ARTIFACT_REGISTRY }}/frontend:$MVN_VERSION
          docker push ${{ env.ARTIFACT_REGISTRY }}/backend:$MVN_VERSION

      - name: Install Cosign
        uses: sigstore/cosign-installer@main
  
      - name: Sign images with Google KMS key
        run: |-
          MVN_VERSION=$(cd backend && mvn -q \
            -Dexec.executable=echo \
            -Dexec.args='${project.version}' \
            --non-recursive \
            exec:exec)
          cosign sign --yes --key ${{ env.KMS }} ${{ env.ARTIFACT_REGISTRY }}/frontend:$MVN_VERSION
          cosign sign --yes --key ${{ env.KMS }} ${{ env.ARTIFACT_REGISTRY }}/backend:$MVN_VERSION

      - name: Deploy docker images to the GKE cluster in prod
        env:
          MANIFESTS: deployment
          DEPLOYMENTS: deployment/dp
          NAMESPACES: deployment/namespaces
          SERVICES: deployment/services
        run: |-
          kubectl apply -f ${{ github.workspace }}/$NAMESPACES/prod.yml
          MVN_VERSION=$(mvn -q \
            -Dexec.executable=echo \
            -Dexec.args='${project.version}' \
            --non-recursive \
            exec:exec)
          sed -e "s/:latest/:$MVN_VERSION/g" ${{ github.workspace }}/$DEPLOYMENTS/frontend.yml | kubectl apply -n env-intern -f -
          sed -e "s/:latest/:$MVN_VERSION/g" ${{ github.workspace }}/$DEPLOYMENTS/backend.yml | kubectl apply -n env-intern -f -
          kubectl apply -f ${{ github.workspace }}/$SERVICES/api.yml -n env-intern
          kubectl apply -f ${{ github.workspace }}/$SERVICES/frontend.yml -n env-intern
          kubectl apply -f ${{ github.workspace }}/$MANIFESTS/ingress.yml -n env-intern
