name: Main CI

on:
  push:
    branches: [ "main" ]

env:
  FRONTEND: ./frontend
  BACKEND: ./backend
  ARTIFACT_REGISTRY: europe-west1-docker.pkg.dev/z-devsecops-cloud/z-devsecops-registry
  GKE_CLUSTER: z-devsecops-cluster
  GKE_ZONE: europe-west1-b
  SA: github-action-sa@z-devsecops-cloud.iam.gserviceaccount.com
  WORKLOAD_ID_PROVIDER: projects/599822394994/locations/global/workloadIdentityPools/cicd/providers/github
  KMS: gcpkms://projects/z-devsecops-cloud/locations/europe-west1/keyRings/cosign/cryptoKeys/cosign
  MAJOR: 1
  MINOR: 0.0

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      # SAST
      #- name: Create .mvn directory for Snyk
      #  run: |-
      #    cd ${{ github.workspace }}/backend
      #    mvn -N io.takari:maven:wrapper

      #- name: Run Snyk to check for Frontend vulnerabilities
      #  uses: snyk/actions/node@master
        # TODO: comment the line below in production
      #  continue-on-error: true
      #  env:
      #    SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #  with:
      #    args: --sarif-file-output=snyk-frontend.sarif --file=frontend/package-lock.json -d

      #- name: Upload Snyk scan Frontend results to GitHub Security tab
      #  uses: github/codeql-action/upload-sarif@v2
      #  with:
      #    sarif_file: snyk-frontend.sarif
      #    category: 'snyk-frontend'

      #- name: Run Snyk to check for Backend vulnerabilities
      #  uses: snyk/actions/maven@master
        # TODO: comment the line below in production
      #  continue-on-error: true
      #  env:
      #    SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #  with:
      #    args: --sarif-file-output=snyk-backend.sarif --file=backend/pom.xml -d

      #- name: Upload Snyk scan Backend results to GitHub Security tab
      #  uses: github/codeql-action/upload-sarif@v2
      #  with:
      #    sarif_file: snyk-backend.sarif
      #    category: 'snyk-backend'

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: '19'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B --update-snapshots package --file ${{ env.BACKEND }}/pom.xml

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        id: auth
        with:
          create_credentials_file: 'true'
          workload_identity_provider: ${{ env.WORKLOAD_ID_PROVIDER }}
          service_account: ${{ env.SA }}

      - name: Configure Docker to use the gcloud command-line tool as a credential
        run: |
          gcloud config set disable_prompts true
          gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}"
          gcloud --quiet auth configure-docker europe-west1-docker.pkg.dev

      - name: Get the GKE credentials
        uses: google-github-actions/get-gke-credentials@v1.0.1
        with:
          project_id: z-devsecops-cloud
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Build frontend docker image
        run: |-
          docker build \
            -t ${{ env.ARTIFACT_REGISTRY }}/frontend:latest \
            -t ${{ env.ARTIFACT_REGISTRY }}/frontend:v${{ env.MAJOR }}.${{ env.MINOR }} \
            ${{ env.FRONTEND }}

      - name: Build backend docker image
        run: |-
          docker build \
            -t ${{ env.ARTIFACT_REGISTRY }}/backend:latest \
            -t ${{ env.ARTIFACT_REGISTRY }}/backend:v${{ env.MAJOR }}.${{ env.MINOR }} \
            ${{ env.BACKEND }}

      #- name: Run Trivy vulnerability scanner for frontend
      #  env:
      #    TRIVY_USERNAME: ""
      #  uses: aquasecurity/trivy-action@master
      #  with:
      #    image-ref: ${{ env.ARTIFACT_REGISTRY }}/frontend:latest
      #    scan-ref: ${{ github.workspace }}/frontend
      #    format: 'sarif'
      #    output: 'trivy-results-frontend.sarif'

      #- name: Run Trivy vulnerability scanner for backend
      #  env:
      #    TRIVY_USERNAME: ""
      #  uses: aquasecurity/trivy-action@master
      #  with:
      #    image-ref: ${{ env.ARTIFACT_REGISTRY }}/backend:latest
      #    scan-ref: ${{ github.workspace }}/backend
      #    format: 'sarif'
      #    output: 'trivy-results-backend.sarif'

      #- name: Upload Trivy scan results to GitHub Security tab frontend
      #  uses: github/codeql-action/upload-sarif@v2
      #  with:
      #    sarif_file: 'trivy-results-frontend.sarif'
      #    category: 'frontend'

      #- name: Upload Trivy scan results to GitHub Security tab backend
      #  uses: github/codeql-action/upload-sarif@v2
      #  with:
      #    sarif_file: 'trivy-results-backend.sarif'
      #    category: 'backend'

      - name: Publish docker images to Google Artifact Registry
        run: |-
          docker push ${{ env.ARTIFACT_REGISTRY }}/frontend --all-tags
          docker push ${{ env.ARTIFACT_REGISTRY }}/backend --all-tags

      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      - name: Sign images with Google KMS key
        run: |-
          cosign sign --yes --key ${{ env.KMS }} ${{ env.ARTIFACT_REGISTRY }}/frontend:latest
          cosign sign --yes --key ${{ env.KMS }} ${{ env.ARTIFACT_REGISTRY }}/backend:latest

      - name: Verify signed images
        run: |-
          cosign verify --key ${{ env.KMS }} ${{ env.ARTIFACT_REGISTRY }}/frontend:latest
          cosign verify --key ${{ env.KMS }} ${{ env.ARTIFACT_REGISTRY }}/backend:latest

      - name: Deploy docker images to the GKE cluster
        env:
          MANIFESTS: deployment
        run: |-
          kubectl apply -f ${{ github.workspace }}/$MANIFESTS/namespace.yml
          kubectl apply -f ${{ github.workspace }}/$MANIFESTS/dp-front.yml
          kubectl apply -f ${{ github.workspace }}/$MANIFESTS/dp-back.yml
      #    kubectl apply -f ${{ github.workspace }}/$MANIFESTS/api.yml
      #    kubectl apply -f ${{ github.workspace }}/$MANIFESTS/frontend.yml
      #    kubectl apply -f ${{ github.workspace }}/$MANIFESTS/ingress.yml
      #    kubectl get all --namespace env-intern

      #- name: OWASP ZAP Full Scan
      #  uses: zaproxy/action-full-scan@v0.4.0
      #  with:
      #   target: 'http://front.34.111.30.200.nip.io'