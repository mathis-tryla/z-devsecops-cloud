name: Main CI

on:
  push:
    branches: [ "main" ]
    
env:
  FRONTEND: ./frontend
  BACKEND: ./backend
  ARTIFACT_REGISTRY: europe-west1-docker.pkg.dev/z-devsecops-cloud/z-devsecops-registry
  GKE_CLUSTER: z-devsecops-cluster
  GKE_ZONE: europe-west1-b
    
jobs:
  build-and-push-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

    - name: Set up JDK 19
      uses: actions/setup-java@v3
      with:
        java-version: '19'
        distribution: 'temurin'
        cache: maven

    # SAST
    #- name: Create .mvn directory
    #  run: |-
    #    cd ${{ github.workspace }}/backend &&
    #    mvn -N io.takari:maven:wrapper

    #- name: Run Snyk to check for vulnerabilities
    #  uses: snyk/actions/maven@master
      # TODO: comment the line below in production
    #  continue-on-error: true
    #  env:
    #    SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    #  with:
    #    args: --all-projects --json-file-output=sast.json

    # UPLOAD SAST RESULTS
    #- name: Upload SAST snyk results
    #  uses: actions/upload-artifact@v3
    #  with:
    #    name: sast.json
    #    path: sast.json

    - name: Build with Maven
      run: mvn -B --update-snapshots package --file ${{ env.BACKEND }}/pom.xml

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v1
      with:
       name: app.jar
       path: ${{ env.BACKEND }}/target

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: 'projects/599822394994/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
        service_account: 'my-service-account@z-devsecops-cloud.iam.gserviceaccount.com'

    #- name: Setup gcloud CLI
    #  uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
    #  with:
    #    service_account_key: ${{ secrets.GKE_SA_KEY }}
    #    project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker europe-west1-docker.pkg.dev

    - name: Get the GKE credentials
      uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    #- name: Build frontend docker image
    #  run: |-
    #    docker build \
    #      --tag "${{ env.ARTIFACT_REGISTRY }}/frontend:latest" \
    #      ${{ env.FRONTEND }}

    #- name: Build backend docker image
    #  run: |-
    #    docker build \
    #      --tag "${{ env.ARTIFACT_REGISTRY }}/backend:latest" \
    #      ${{ env.BACKEND }}

    #- name: Run Trivy vulnerability scanner for frontend
    #  env:
    #    GOOGLE_APPLICATION_CREDENTIAL: ${{ secrets.GKE_SA_KEY }}
    #    TRIVY_USERNAME: ""
    #  uses: aquasecurity/trivy-action@master
    #  with:
    #    image-ref: 'europe-west1-docker.pkg.dev/z-devsecops-cloud/z-devsecops-registry/frontend:latest'
    #    scan-ref: ${{ github.workspace }}/frontend
    #    format: 'json'
    #    output: 'frontend-image-trivy-results.json'

    #- name: Run Trivy vulnerability scanner for backend
    #  env:
    #    GOOGLE_APPLICATION_CREDENTIAL: ${{ secrets.GKE_SA_KEY }}
    #    TRIVY_USERNAME: ""
    #  uses: aquasecurity/trivy-action@master
    #  with:
    #    image-ref: 'europe-west1-docker.pkg.dev/z-devsecops-cloud/z-devsecops-registry/backend:latest'
    #    scan-ref: ${{ github.workspace }}/backend
    #    format: 'json'
    #    output: 'backend-image-trivy-results.json'

    # UPLOAD FRONTEND IMAGE SCANNING RESULTS
    #- name: Upload frontend image trivy scanning results
    #  uses: actions/upload-artifact@v3
    #  with:
    #    name: frontend-trivy-results.json
    #    path: frontend-image-trivy-results.json

    # UPLOAD BACKEND IMAGE SCANNING RESULTS
    #- name: Upload backend image trivy scanning results
    #  uses: actions/upload-artifact@v3
    #  with:
    #    name: backend-trivy-results.json
    #    path: backend-image-trivy-results.json

    #- name: Install Cosign
    #  uses: sigstore/cosign-installer@main

    #- name: Check cosign installation
    #  run: cosign version

    #- name: Sign the frontend image with GitHub OIDC Token
    #  run: |-
    #    IDENTITY_TOKEN=$(gcloud auth print-identity-token --audiences=sigstore) &&
    #    cosign sign --yes --identity-token=$IDENTITY_TOKEN ${{ env.ARTIFACT_REGISTRY }}/frontend:latest

    #- name: Sign the backend image with GitHub OIDC Token
    #  run: |-
    #    IDENTITY_TOKEN=$(gcloud auth print-identity-token --audiences=sigstore) &&
    #    cosign sign --yes --identity-token=$IDENTITY_TOKEN ${{ env.ARTIFACT_REGISTRY }}/backend:latest

    #- name: Publish docker images to Google Artifact Registry
    #  run: |-
    #    docker push "${{ env.ARTIFACT_REGISTRY }}/frontend:latest" && \
    #    docker push "${{ env.ARTIFACT_REGISTRY }}/backend:latest"

    #- name: Deploy docker images to the GKE cluster
    #  env:
    #    MANIFESTS: deployment
    #  run: |-
    #    kubectl apply -f ${{ github.workspace }}/$MANIFESTS/my-ns.yml
    #    kubectl apply -f ${{ github.workspace }}/$MANIFESTS/dp-front.yml
    #    kubectl apply -f ${{ github.workspace }}/$MANIFESTS/dp-back.yml
    #    kubectl apply -f ${{ github.workspace }}/$MANIFESTS/my-service.yml
    #    kubectl get all --namespace env-intern