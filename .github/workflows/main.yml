name: Main CI

on:
  push:
    branches: [ "main" ]

env:
  FRONTEND: ./frontend
  BACKEND: ./backend
  ARTIFACT_REGISTRY: europe-west1-docker.pkg.dev/z-devsecops-cloud/z-devsecops-registry
  GKE_CLUSTER: z-devsecops-cluster
  GKE_ZONE: europe-west1-b
  SA: github-action-sa@z-devsecops-cloud.iam.gserviceaccount.com
  WORKLOAD_ID_PROVIDER: projects/599822394994/locations/global/workloadIdentityPools/cicd/providers/github
  KMS: gcpkms://projects/z-devsecops-cloud/locations/europe-west1/keyRings/cosign/cryptoKeys/cosign

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: '19'
          distribution: 'temurin'
          cache: maven

      # SAST
      - name: Create .mvn directory
        run: |-
          cd ${{ github.workspace }}/backend 
          mvn -N io.takari:maven:wrapper

      - name: Run Snyk to check for vulnerabilities
        working-directory: ${{ env.BACKEND }}
        uses: snyk/actions/maven@master
        # TODO: comment the line below in production
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=pom.xml --sarif-file-output=snyk-maven.sarif

      - name: Upload Snyk scan results to GitHub Security tab
        working-directory: ${{ env.BACKEND }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-maven.sarif
          category: 'snyk-maven'

      - name: Build with Maven
        run: mvn -B --update-snapshots package --file ${{ env.BACKEND }}/pom.xml

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        id: auth
        with:
          create_credentials_file: 'true'
          workload_identity_provider: ${{ env.WORKLOAD_ID_PROVIDER }}
          service_account: ${{ env.SA }}

      - name: Configure Docker to use the gcloud command-line tool as a credential
        run: |
          gcloud config set disable_prompts true
          gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}"
          gcloud --quiet auth configure-docker europe-west1-docker.pkg.dev

      - name: Get the GKE credentials
        uses: google-github-actions/get-gke-credentials@v1.0.1
        with:
          project_id: z-devsecops-cloud
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Build frontend docker image
        run: |-
          docker build \
            --tag "${{ env.ARTIFACT_REGISTRY }}/frontend" \
            ${{ env.FRONTEND }}

      - name: Build backend docker image
        run: |-
          docker build \
            --tag "${{ env.ARTIFACT_REGISTRY }}/backend" \
            ${{ env.BACKEND }}

      #- name: Run Trivy vulnerability scanner for frontend
      #  env:
      #    TRIVY_USERNAME: ""
      #  uses: aquasecurity/trivy-action@master
      #  with:
      #    image-ref: ${{ env.ARTIFACT_REGISTRY }}/frontend:latest
      #    scan-ref: ${{ github.workspace }}/frontend
      #    format: 'sarif'
      #    output: 'trivy-results-frontend.sarif'

      #- name: Run Trivy vulnerability scanner for backend
      #  env:
      #    TRIVY_USERNAME: ""
      #  uses: aquasecurity/trivy-action@master
      #  with:
      #    image-ref: ${{ env.ARTIFACT_REGISTRY }}/backend:latest
      #    scan-ref: ${{ github.workspace }}/backend
      #    format: 'sarif'
      #    output: 'trivy-results-backend.sarif'

      #- name: Upload Trivy scan results to GitHub Security tab frontend
      #  uses: github/codeql-action/upload-sarif@v2
      #  with:
      #    sarif_file: 'trivy-results-frontend.sarif'
      #    category: 'frontend'

      #- name: Upload Trivy scan results to GitHub Security tab backend
      #  uses: github/codeql-action/upload-sarif@v2
      #  with:
      #    sarif_file: 'trivy-results-backend.sarif'
      #    category: 'backend'

      #- name: Publish docker images to Google Artifact Registry
      #  run: |-
      #    SHA_FRONT=$(docker push "${{ env.ARTIFACT_REGISTRY }}/frontend" | grep digest: | cut -f3 -d" ")
      #    SHA_BACK=$(docker push "${{ env.ARTIFACT_REGISTRY }}/backend" | grep digest: | cut -f3 -d" ")

      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      - name: Sign images with Google KMS key
        run: |-
          cosign sign --yes --key ${{ env.KMS }} ${{ env.ARTIFACT_REGISTRY }}/frontend
          cosign sign --yes --key ${{ env.KMS }} ${{ env.ARTIFACT_REGISTRY }}/backend

      - name: Verify signed images
        run: |-
          cosign verify --key ${{ env.KMS }} ${{ env.ARTIFACT_REGISTRY }}/frontend
          cosign verify --key ${{ env.KMS }} ${{ env.ARTIFACT_REGISTRY }}/backend

      #- name: Install Police-controller helm chart
      #  run: |-
      #    helm repo add sigstore https://sigstore.github.io/helm-charts
      #    helm repo update
      #    helm install policy-controller -n env-intern sigstore/policy-controller \
      #    --set "policywebhook.serviceAccount.annotations.iam\.gke\.io/gcp-service-account=${{ secrets.SA }}" \
      #    --set "webhook.serviceAccount.annotations.iam\.gke\.io/gcp-service-account=${{ secrets.SA }}"

      #- name: Deploy the policy only allowing signed container images with Cloud KMS key
      #  run: |-
      #    cat << EOF | kubectl apply -f -
      #    apiVersion: policy.sigstore.dev/v1beta1
      #    kind: ClusterImagePolicy
      #    metadata:
      #      name: private-signed-images-cip
      #      namespace: env-intern
      #    spec:
      #      images:
      #      - glob: "**"
      #      authorities:
      #      - key:
      #          kms: ${{ env.KMS }}/cryptoKeyVersions/1
      #    EOF
      #    kubectl label namespace env-intern policy.sigstore.dev/include=true

      #- name: Test with an unsigned container image and see if itâ€™s blocked
      #  run: |-
      #    kubectl create deployment nginx \
      #    --image=nginx \
      #    -n env-intern

      - name: Deploy docker images to the GKE cluster
        env:
          MANIFESTS: deployment
        run: |-
          kubectl apply -f ${{ github.workspace }}/$MANIFESTS/my-ns.yml
          kubectl apply -f ${{ github.workspace }}/$MANIFESTS/dp-front.yml
          kubectl apply -f ${{ github.workspace }}/$MANIFESTS/dp-back.yml
          kubectl apply -f ${{ github.workspace }}/$MANIFESTS/my-service.yml
          kubectl get all --namespace env-intern

      # FALCO CONTAINER RUNTIME SECURITY
      - name: Install Falco with Helm
        run: |-
          helm repo add falcosecurity https://falcosecurity.github.io/charts
          helm repo update
          helm install falco --set tty=true falcosecurity/falco -n env-intern